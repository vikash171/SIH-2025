# Product Requirements Document (PRD)

## 1. Vision & Idea
The goal is to build an **offline-first, gamified digital learning platform** for rural schools (grades 6–12) focused on STEM education. 
The platform will operate as a **Progressive Web App (PWA)**, designed to work reliably on low-cost Android devices and basic school computers. 

- **Rolling release model**: Initial install delivers a minimal content pack (textbooks, exercises, 5-6 games). 
- **Offline-first**: Students can always access essential content (games, quizzes, progress tracking) without internet. 
- **Cloud as enhancement**: When internet is available, the system syncs telemetry, downloads new content packs, and unlocks advanced features (leaderboards, AI content generation, virtual labs). 
- **Gamification**: Games, leveling, random exercises, and achievements to improve engagement. 
- **Teacher Dashboard**: Provides analytics on student progress, content management, and update visibility. 
- **Multilingual support**: Content and UI adapt to regional languages at install-time. 

The system must remain modular and lightweight: games, exercises, and content are separate packs loaded dynamically, never hard-coded.

---

## 2. Constraints

### Functional Constraints
- Must run fully offline after initial install. 
- Must support **low bandwidth and intermittent connectivity**. 
- Must handle **device diversity**: low-end Android phones, basic PCs, potentially Raspberry Pi school servers. 
- Must allow **modular updates**: content packs are versioned, signed, and downloaded as deltas. 
- Must provide **teacher-facing analytics** both offline and cloud-enhanced. 
- Must include a **fallback evergreen pack** that always works, even without sync. 

### Non-Functional Constraints
- **Install size**: Initial essential pack < 50 MB. 
- **Performance**: Usable on devices with 1–2 GB RAM. 
- **Battery-efficient**: Lightweight animations and optimized caching. 
- **Security**: All content packs signed; local DB encrypted. 
- **Privacy**: Telemetry anonymized; compliance with local data policies. 
- **Scalability**: Rolling release system must support multiple states, languages, and curricula. 

---

## 3. Tech Stack

### Core Web App / PWA
- **Framework**: React (with Vite) – fast builds, strong ecosystem. 
- **Styling**: TailwindCSS (utility-first, low overhead). 
- **State Management**: Redux Toolkit or Zustand, persisted via IndexedDB. 
- **PWA Runtime**: Service Worker with Workbox (precaching, background sync). 
- **Local Database**: IndexedDB via Dexie.js for content, manifests, and telemetry. 

### Game Runtime
- **Engine**: Phaser 3 (HTML5-based, runs inside React). 
- Games implemented as **modular bundles** with scoring/telemetry hooks. 

### Data & Sync
- **Transport**: REST API (primary), WebSocket (optional enhancements). 
- **Format**: JSON (initial), option for Avro/Protobuf for compression. 
- **Sync Agent**: Delta upload/download, resumable, conflict resolution rules. 

### Packaging & Deployment
- **PWA installable app**: manifest.json + service worker. 
- **Optional Android wrapper**: Capacitor or Trusted Web Activity (TWA) for Play Store distribution. 
- **Backend**: Node.js (API + content delivery), PostgreSQL (telemetry, content registry). 
- **Optional school gateway**: Local server caching packs for bandwidth savings. 

---

## 4. MVP Scope
- Enrollment screen (school ID, class, language). 
- Minimal initial pack (1 game, quiz engine, textbook PDF/HTML). 
- Service Worker caching & offline support. 
- Local Dexie DB for storing packs & telemetry. 
- Sync mock API (upload stats, fetch manifest). 
- Teacher dashboard (basic local stats view). 

